[{
  "text": "Strict mode",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
  "title": ""
}, {
  "text": "Built-in objects",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",
  "title": ""
}, {
  "text": "Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
  "title": "The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects."
}, {
  "text": "ArrayBuffer",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
  "title": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer."
}, {
  "text": "AsyncFunction",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
  "title": "The AsyncFunction constructor creates a new async function object. In JavaScript every asynchronous function is actually an AsyncFunction object."
}, {
  "text": "Atomics",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
  "title": "The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects."
}, {
  "text": "Boolean",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
  "title": "The Boolean object is an object wrapper for a boolean value."
}, {
  "text": "DataView",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
  "title": "The DataView view provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness."
}, {
  "text": "Date",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
  "title": "Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC."
}, {
  "text": "Error",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
  "title": "The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types."
}, {
  "text": "EvalError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
  "title": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility."
}, {
  "text": "Float32Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
  "title": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Float64Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
  "title": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Function",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
  "title": "The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and performance issues similar to eval."
}, {
  "text": "Generator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
  "title": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol."
}, {
  "text": "GeneratorFunction",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
  "title": "The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object."
}, {
  "text": "Infinity",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
  "title": "The global Infinity property is a numeric value representing infinity."
}, {
  "text": "Int16Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
  "title": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Int32Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
  "title": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Int8Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
  "title": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "InternalError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
  "title": "The InternalError object indicates an error that occurred internally in the JavaScript engine. For example: \"InternalError: too much recursion\"."
}, {
  "text": "Intl",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
  "title": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions."
}, {
  "text": "Intl.Collator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator",
  "title": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison."
}, {
  "text": "Intl.DateTimeFormat",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat",
  "title": "The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting."
}, {
  "text": "Intl.NumberFormat",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
  "title": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting."
}, {
  "text": "Intl.PluralRules",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules",
  "title": "The Intl.PluralRules object is a constructor for objects that enable plural sensitive formatting and plural language language rules."
}, {
  "text": "JSON",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
  "title": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own."
}, {
  "text": "Map",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
  "title": "The Map object holds key-value pairs."
}, {
  "text": "Math",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
  "title": "Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object."
}, {
  "text": "NaN",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
  "title": "The global NaN property is a value representing Not-A-Number."
}, {
  "text": "Number",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
  "title": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor."
}, {
  "text": "Object",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
  "title": "The Object constructor creates an object wrapper."
}, {
  "text": "Promise",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
  "title": "The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value."
}, {
  "text": "Proxy",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
  "title": "The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)."
}, {
  "text": "RangeError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
  "title": "The RangeError object indicates an error when a value is not in the set or range of allowed values."
}, {
  "text": "ReferenceError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
  "title": "The ReferenceError object represents an error when a non-existent variable is referenced."
}, {
  "text": "Reflect",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
  "title": "Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible."
}, {
  "text": "RegExp",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
  "title": "The RegExp constructor creates a regular expression object for matching text with a pattern."
}, {
  "text": "SIMD",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Bool16x8",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool16x8",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Bool32x4",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool32x4",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Bool64x2",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool64x2",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Bool8x16",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool8x16",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Float32x4",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32x4",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Float64x2",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64x2",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Int16x8",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16x8",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Int32x4",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32x4",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Int8x16",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8x16",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Uint16x8",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16x8",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Uint32x4",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32x4",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "SIMD.Uint8x16",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8x16",
  "title": "SIMD.js has been taken out of active development in TC39 and removed from Stage 3. It is not being pursued by web browsers for implementation anymore. SIMD operations exposed to the web are under active development within WebAssembly, with operations based on the SIMD.js operations."
}, {
  "text": "Set",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
  "title": "The Set object lets you store unique values of any type, whether primitive values or object references."
}, {
  "text": "SharedArrayBuffer",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
  "title": "The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached."
}, {
  "text": "String",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
  "title": "The String global object is a constructor for strings or a sequence of characters."
}, {
  "text": "Symbol",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
  "title": "The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class but is incomplete as a constructor because it does not support the syntax \"new Symbol()\"."
}, {
  "text": "SyntaxError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
  "title": "The SyntaxError object represents an error when trying to interpret syntactically invalid code."
}, {
  "text": "TypeError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
  "title": "The TypeError object represents an error when a value is not of the expected type."
}, {
  "text": "TypedArray",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
  "title": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type."
}, {
  "text": "URIError",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
  "title": "The URIError object represents an error when a global URI handling function was used in a wrong way."
}, {
  "text": "Uint16Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
  "title": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Uint32Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
  "title": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Uint8Array",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
  "title": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "Uint8ClampedArray",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
  "title": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
}, {
  "text": "WeakMap",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
  "title": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values."
}, {
  "text": "WeakSet",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
  "title": "The WeakSet object lets you store weakly held objects in a collection."
}, {
  "text": "WebAssembly",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly",
  "title": "The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality."
}, {
  "text": "decodeURI()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
  "title": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine."
}, {
  "text": "decodeURIComponent()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
  "title": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine."
}, {
  "text": "encodeURI()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
  "title": "The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
}, {
  "text": "encodeURIComponent()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
  "title": "The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
}, {
  "text": "escape()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
  "title": "The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence."
}, {
  "text": "eval()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
  "title": "The eval() function evaluates JavaScript code represented as a string."
}, {
  "text": "isFinite()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
  "title": "The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number."
}, {
  "text": "isNaN()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
  "title": "The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015."
}, {
  "text": "null",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
  "title": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values."
}, {
  "text": "parseFloat()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
  "title": "The parseFloat() function parses an argument and returns a floating point number."
}, {
  "text": "parseInt()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
  "title": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems)."
}, {
  "text": "undefined",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
  "title": "The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types."
}, {
  "text": "unescape()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
  "title": "The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape."
}, {
  "text": "uneval()",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval",
  "title": "The uneval() function creates a string representation of the source code of an Object."
}, {
  "text": "Expressions & operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators",
  "title": ""
}, {
  "text": "Arithmetic operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",
  "title": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/)."
}, {
  "text": "Array comprehensions",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions",
  "title": "The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!"
}, {
  "text": "Assignment operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators",
  "title": "An assignment operator assigns a value to its left operand based on the value of its right operand."
}, {
  "text": "Bitwise operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators",
  "title": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values."
}, {
  "text": "Comma operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator",
  "title": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand."
}, {
  "text": "Comparison operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators",
  "title": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison."
}, {
  "text": "Conditional (ternary) Operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
  "title": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement."
}, {
  "text": "Destructuring assignment",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
  "title": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables."
}, {
  "text": "Expression closures",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures",
  "title": "Expression closures are a shorthand function syntax for writing simple functions."
}, {
  "text": "Generator comprehensions",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions",
  "title": "The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!"
}, {
  "text": "Grouping operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
  "title": "The grouping operator ( ) controls the precedence of evaluation in expressions."
}, {
  "text": "Legacy generator function expression",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function",
  "title": "The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression."
}, {
  "text": "Logical Operators",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators",
  "title": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value."
}, {
  "text": "Object initializer",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
  "title": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({})."
}, {
  "text": "Operator precedence",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",
  "title": "Operator precedence determines the way in which operators are parsed with respect to each other. Operators with higher precedence become the operands of operators with lower precedence."
}, {
  "text": "Pipeline operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Pipeline_operator",
  "title": "The experimental pipeline operator |> (currently at stage 1) allows to create chained function calls in a readable manner. Basically, the pipeline operator provides syntactic sugar on a function call with a single argument allowing you to write"
}, {
  "text": "Property accessors",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors",
  "title": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation."
}, {
  "text": "Spread syntax",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator",
  "title": "The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."
}, {
  "text": "async function expression",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
  "title": "The async function keyword can be used to define async functions inside expressions."
}, {
  "text": "await",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
  "title": "The await operator is used to wait for a Promise. It can only be used inside an async function."
}, {
  "text": "class expression",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
  "title": "The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance."
}, {
  "text": "delete operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
  "title": "The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically."
}, {
  "text": "function expression",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
  "title": "The function keyword can be used to define a function inside an expression."
}, {
  "text": "function* expression",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
  "title": "The function* keyword can be used to define a generator function inside an expression."
}, {
  "text": "in operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
  "title": "The in operator returns true if the specified property is in the specified object or its prototype chain."
}, {
  "text": "instanceof",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
  "title": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object."
}, {
  "text": "new operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
  "title": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function."
}, {
  "text": "new.target",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
  "title": "The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined."
}, {
  "text": "super",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
  "title": "The super keyword is used to access and call functions on an object's parent."
}, {
  "text": "this",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
  "title": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode."
}, {
  "text": "typeof",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
  "title": "The typeof operator returns a string indicating the type of the unevaluated operand."
}, {
  "text": "void operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
  "title": "The void operator evaluates the given expression and then returns undefined."
}, {
  "text": "yield",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
  "title": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function)."
}, {
  "text": "yield*",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
  "title": "The yield* expression is used to delegate to another generator or iterable object."
}, {
  "text": "Statements & declarations",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
  "title": ""
}, {
  "text": "Legacy generator function",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function",
  "title": "The legacy generator function statement declares legacy generator functions with the specified parameters."
}, {
  "text": "async function",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
  "title": "The source for this interactive demo is stored in a GitHub repository. If you'd like to contribute to the interactive demo project, please clone https://github.com/mdn/interactive-examples and send us a pull request."
}, {
  "text": "block",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block",
  "title": "A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:"
}, {
  "text": "break",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
  "title": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement."
}, {
  "text": "class",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class",
  "title": "The class declaration creates a new class with a given name using prototype-based inheritance."
}, {
  "text": "const",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
  "title": "This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike var variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later)."
}, {
  "text": "continue",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
  "title": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration."
}, {
  "text": "debugger",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
  "title": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect."
}, {
  "text": "default",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default",
  "title": "The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement."
}, {
  "text": "do...while",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
  "title": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
}, {
  "text": "empty",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty",
  "title": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one."
}, {
  "text": "export",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
  "title": "The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement."
}, {
  "text": "for",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
  "title": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop."
}, {
  "text": "for each...in",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in",
  "title": "The for each...in statement iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed."
}, {
  "text": "for...in",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
  "title": "The for...in statement iterates over the enumerable properties of an object. For each distinct property, statements can be executed."
}, {
  "text": "for...of",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
  "title": "The for...of statement creates a loop iterating over iterable objects (including the built-in String, Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, and user-defined iterables), invoking a custom iteration hook with statements to be executed for the value of each distinct property of the object."
}, {
  "text": "function declaration",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
  "title": "The function declaration defines a function with the specified parameters."
}, {
  "text": "function*",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",
  "title": "The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object."
}, {
  "text": "if...else",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
  "title": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed."
}, {
  "text": "import",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
  "title": "The import statement is used to import bindings which are exported by another module."
}, {
  "text": "label",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
  "title": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to."
}, {
  "text": "let",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
  "title": "The let statement declares a block scope local variable, optionally initializing it to a value."
}, {
  "text": "return",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
  "title": "The return statement ends function execution and specifies a value to be returned to the function caller."
}, {
  "text": "switch",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
  "title": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case."
}, {
  "text": "throw",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
  "title": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate."
}, {
  "text": "try...catch",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
  "title": "The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown."
}, {
  "text": "var",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
  "title": "The variable statement declares a variable, optionally initializing it to a value."
}, {
  "text": "while",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
  "title": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement."
}, {
  "text": "with",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
  "title": "The with statement extends the scope chain for a statement."
}, {
  "text": "Functions",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
  "title": ""
}, {
  "text": "Arguments object",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
  "title": "The arguments object is an Array-like object corresponding to the arguments passed to a function."
}, {
  "text": "Arrow functions",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
  "title": "An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors."
}, {
  "text": "Default parameters",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters",
  "title": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed."
}, {
  "text": "Method definitions",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions",
  "title": "Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name."
}, {
  "text": "Rest parameters",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
  "title": "The rest parameter syntax allows us to represent an indefinite number of arguments as an array."
}, {
  "text": "getter",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",
  "title": "The get syntax binds an object property to a function that will be called when that property is looked up."
}, {
  "text": "setter",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",
  "title": "The set syntax binds an object property to a function to be called when there is an attempt to set that property."
}, {
  "text": "Classes",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
  "title": ""
}, {
  "text": "constructor",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor",
  "title": "The constructor method is a special method for creating and initializing an object created within a class."
}, {
  "text": "extends",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends",
  "title": "The extends keyword is used in class declarations or class expressions to create a class which is a child of another class."
}, {
  "text": "static",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static",
  "title": "The static keyword defines a static method for a class."
}, {
  "text": "Errors",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors",
  "title": ""
}, {
  "text": "Error: Permission denied to access property \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied",
  "title": "There was attempt to access an object for which you have no permission. This is likely an <iframe> element loaded from a different domain for which you violated the same-origin policy."
}, {
  "text": "InternalError: too much recursion",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion",
  "title": "When there is too much or infinite recursion, JavaScript will throw this error."
}, {
  "text": "RangeError: argument is not a valid code point",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint",
  "title": "RangeError"
}, {
  "text": "RangeError: invalid array length",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length",
  "title": "RangeError"
}, {
  "text": "RangeError: invalid date",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date",
  "title": "RangeError"
}, {
  "text": "RangeError: precision is out of range",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range",
  "title": "RangeError"
}, {
  "text": "RangeError: radix must be an integer",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix",
  "title": "RangeError"
}, {
  "text": "RangeError: repeat count must be less than infinity",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large",
  "title": "RangeError"
}, {
  "text": "RangeError: repeat count must be non-negative",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count",
  "title": "RangeError"
}, {
  "text": "ReferenceError: \"x\" is not defined",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined",
  "title": "ReferenceError."
}, {
  "text": "ReferenceError: assignment to undeclared variable \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var",
  "title": "ReferenceError warning in strict mode only."
}, {
  "text": "ReferenceError: can't access lexical declaration`X' before initialization",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init",
  "title": "ReferenceError"
}, {
  "text": "ReferenceError: deprecated caller or arguments usage",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage",
  "title": "A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted."
}, {
  "text": "ReferenceError: invalid assignment left-hand side",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side",
  "title": "ReferenceError."
}, {
  "text": "ReferenceError: reference to undefined property \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop",
  "title": "ReferenceError warning in strict mode only."
}, {
  "text": "SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal",
  "title": "SyntaxError in strict mode only."
}, {
  "text": "SyntaxError: \"use strict\" not allowed in function with non-simple parameters",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params",
  "title": "SyntaxError."
}, {
  "text": "SyntaxError: \"x\" is a reserved identifier",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: JSON.parse: bad parsing",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: Malformed formal parameter",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: Unexpected token",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma",
  "title": "A warning that a SyntaxError occurred. JavaScript execution won't be halted."
}, {
  "text": "SyntaxError: a declaration in the head of a for-of loop can't have an initializer",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: applying the 'delete' operator to an unqualified name is deprecated",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode",
  "title": "SyntaxError in strict mode only."
}, {
  "text": "SyntaxError: for-in loop head declarations may not have initializers",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer",
  "title": "SyntaxError in strict mode only."
}, {
  "text": "SyntaxError: function statement requires a name",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: identifier starts immediately after numeric literal",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: illegal character",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: invalid regular expression flag \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing ) after argument list",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list",
  "title": "SyntaxError."
}, {
  "text": "SyntaxError: missing ) after condition",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing : after property id",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing ; before statement",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement",
  "title": "SyntaxError."
}, {
  "text": "SyntaxError: missing = in const declaration",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing ] after element list",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list",
  "title": "SyntaxError."
}, {
  "text": "SyntaxError: missing formal parameter",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing name after . operator",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing variable name",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing } after function body",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: missing } after property list",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: redeclaration of formal parameter \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter",
  "title": "SyntaxError"
}, {
  "text": "SyntaxError: return not in function",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield",
  "title": "SyntaxError."
}, {
  "text": "SyntaxError: test for equality (==) mistyped as assignment (=)?",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign",
  "title": "SyntaxError warning in strict mode only."
}, {
  "text": "SyntaxError: unterminated string literal",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal",
  "title": "SyntaxError"
}, {
  "text": "TypeError: \"x\" has no properties",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties",
  "title": "TypeError."
}, {
  "text": "TypeError: \"x\" is (not) \"y\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type",
  "title": "TypeError."
}, {
  "text": "TypeError: \"x\" is not a constructor",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor",
  "title": "TypeError"
}, {
  "text": "TypeError: \"x\" is not a function",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function",
  "title": "TypeError."
}, {
  "text": "TypeError: \"x\" is not a non-null object",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object",
  "title": "TypeError"
}, {
  "text": "TypeError: \"x\" is read-only",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only",
  "title": "TypeError"
}, {
  "text": "TypeError: More arguments needed",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed",
  "title": "TypeError."
}, {
  "text": "TypeError: can't access dead object",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Dead_object",
  "title": "TypeError"
}, {
  "text": "TypeError: can't define property \"x\": \"obj\" is not extensible",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible",
  "title": "TypeError"
}, {
  "text": "TypeError: can't delete non-configurable array element",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element",
  "title": "TypeError"
}, {
  "text": "TypeError: can't redefine non-configurable property \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property",
  "title": "TypeError"
}, {
  "text": "TypeError: cannot use 'in' operator to search for 'x' in 'y'",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object",
  "title": "TypeError"
}, {
  "text": "TypeError: cyclic object value",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value",
  "title": "TypeError"
}, {
  "text": "TypeError: invalid Array.prototype.sort argument",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument",
  "title": "TypeError"
}, {
  "text": "TypeError: invalid arguments",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Typed_array_invalid_arguments",
  "title": "TypeError"
}, {
  "text": "TypeError: invalid assignment to const \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment",
  "title": "TypeError"
}, {
  "text": "TypeError: property \"x\" is non-configurable and can't be deleted",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete",
  "title": "TypeError in strict mode only."
}, {
  "text": "TypeError: setting getter-only property \"x\"",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only",
  "title": "TypeError in strict mode only."
}, {
  "text": "TypeError: variable \"x\" redeclares argument",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Var_hides_argument",
  "title": "TypeError warning in strict mode only."
}, {
  "text": "URIError: malformed URI sequence",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI",
  "title": "URIError"
}, {
  "text": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma",
  "title": "A warning. JavaScript execution won't be halted."
}, {
  "text": "Warning: 08/09 is not a legal ECMA-262 octal constant",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal",
  "title": "Warning. JavaScript execution won't be halted."
}, {
  "text": "Warning: Date.prototype.toLocaleFormat is deprecated",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat",
  "title": "Warning. JavaScript execution won't be halted."
}, {
  "text": "Warning: JavaScript 1.6's for-each-in loops are deprecated",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/For-each-in_loops_are_deprecated",
  "title": "Warning"
}, {
  "text": "Warning: String.x is deprecated; use String.prototype.x instead",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics",
  "title": "Warning. JavaScript execution won't be halted."
}, {
  "text": "Warning: expression closures are deprecated",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures",
  "title": "Warning. JavaScript execution won't be halted."
}, {
  "text": "Warning: unreachable code after return statement",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return",
  "title": "Warning"
}, {
  "text": "X.prototype.y called on incompatible type",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type",
  "title": "TypeError"
}, {
  "text": "Lexical grammar",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar",
  "title": ""
}, {
  "text": "Iteration protocols",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
  "title": ""
}, {
  "text": "Strict mode",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
  "title": ""
}, {
  "text": "Transitioning to strict mode",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode",
  "title": ""
}, {
  "text": "Template literals",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
  "title": ""
}, {
  "text": "Deprecated features",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features",
  "title": ""
}, {
  "text": "Methods index",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Methods_Index",
  "title": ""
}, {
  "text": "Properties index",
  "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Properties_Index",
  "title": ""
}]